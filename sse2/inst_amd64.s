#include "textflag.h"

#define x1ret \
		MOVOU X1, (DI);\
		RET;\

#define X1X2TOREG \
		MOVQ a+0(FP), SI;\
		MOVQ b+24(FP), DI;\
		MOVOU (SI), X1;\
		MOVOU (DI), X2;\

#define RETX1 \
	MOVOU X1, (SI);\
	RET;\

#define IMMX(OPCODE) \
		JMP CX;		\
		OPCODE X1, X2, 0;\
		MOVOU X1, (DI);\
		RET



TEXT ·ADDPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	ADDPD X2, X1
	RETX1
	

TEXT ·ADDPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	ADDPD X2, X1
	RETX1
	


TEXT ·ADDSDm64byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	ADDSD X2, X1
	RETX1
	

TEXT ·ADDSDm64float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	ADDSD X2, X1
	RETX1
	


TEXT ·ANDNPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	ANDNPD X2, X1
	RETX1
	

TEXT ·ANDNPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	ANDNPD X2, X1
	RETX1
	


TEXT ·ANDPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	ANDPD X2, X1
	RETX1
	

TEXT ·ANDPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	ANDPD X2, X1
	RETX1
	


TEXT ·COMISDm64byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	COMISD X2, X1
	RETX1
	


TEXT ·DIVPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	DIVPD X2, X1
	RETX1
	

TEXT ·DIVPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	DIVPD X2, X1
	RETX1
	


TEXT ·DIVSDm64byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	DIVSD X2, X1
	RETX1
	

TEXT ·DIVSDm64float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	DIVSD X2, X1
	RETX1
	


TEXT ·MASKMOVDQUbyte(SB),NOSPLIT,$0-48
	X1X2TOREG
	MASKMOVDQU X2, X1
	RETX1
	


TEXT ·MAXPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	MAXPD X2, X1
	RETX1
	


TEXT ·MAXSDm64byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	MAXSD X2, X1
	RETX1
	

TEXT ·MAXSDm64float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	MAXSD X2, X1
	RETX1
	


TEXT ·MINPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	MINPD X2, X1
	RETX1
	

TEXT ·MINPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	MINPD X2, X1
	RETX1
	


TEXT ·MINSDm64byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	MINSD X2, X1
	RETX1
	

TEXT ·MINSDm64float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	MINSD X2, X1
	RETX1
	


TEXT ·MULPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	MULPD X2, X1
	RETX1
	

TEXT ·MULPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	MULPD X2, X1
	RETX1
	


TEXT ·MULSDm64byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	MULSD X2, X1
	RETX1
	

TEXT ·MULSDm64float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	MULSD X2, X1
	RETX1
	


TEXT ·ORPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	ORPD X2, X1
	RETX1
	

TEXT ·ORPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	ORPD X2, X1
	RETX1
	


TEXT ·PACKSSDWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0x6B;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PACKSSWBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PACKSSWB X2, X1
	RETX1
	


TEXT ·PACKUSWBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PACKUSWB X2, X1
	RETX1
	


TEXT ·PADDBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDB X2, X1
	RETX1
	

TEXT ·PADDBm128int8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDB X2, X1
	RETX1
	


TEXT ·PADDDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDD X2, X1
	RETX1
	

TEXT ·PADDDm128int32(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDD X2, X1
	RETX1
	


TEXT ·PADDQm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDQ X2, X1
	RETX1
	

TEXT ·PADDQm128int64(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDQ X2, X1
	RETX1
	


TEXT ·PADDSBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDSB X2, X1
	RETX1
	

TEXT ·PADDSBm128int8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDSB X2, X1
	RETX1
	


TEXT ·PADDSWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDSW X2, X1
	RETX1
	

TEXT ·PADDSWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDSW X2, X1
	RETX1
	


TEXT ·PADDUSBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDUSB X2, X1
	RETX1
	

TEXT ·PADDUSBm128uint8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDUSB X2, X1
	RETX1
	


TEXT ·PADDUSWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDUSW X2, X1
	RETX1
	

TEXT ·PADDUSWm128uint16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDUSW X2, X1
	RETX1
	


TEXT ·PADDWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDW X2, X1
	RETX1
	

TEXT ·PADDWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PADDW X2, X1
	RETX1
	


TEXT ·PANDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PAND X2, X1
	RETX1
	


TEXT ·PANDNm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PANDN X2, X1
	RETX1
	


TEXT ·PAVGBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PAVGB X2, X1
	RETX1
	

TEXT ·PAVGBm128int8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PAVGB X2, X1
	RETX1
	


TEXT ·PAVGWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PAVGW X2, X1
	RETX1
	

TEXT ·PAVGWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PAVGW X2, X1
	RETX1
	


TEXT ·PCMPEQBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PCMPEQB X2, X1
	RETX1
	


TEXT ·PCMPEQDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0x76;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PCMPEQWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PCMPEQW X2, X1
	RETX1
	


TEXT ·PCMPGTBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PCMPGTB X2, X1
	RETX1
	

TEXT ·PCMPGTBm128int8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PCMPGTB X2, X1
	RETX1
	


TEXT ·PCMPGTDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0x66;  BYTE $0xca // $0xca = X2, X1
	RETX1
	

TEXT ·PCMPGTDm128int32(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0x66;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PCMPGTWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PCMPGTW X2, X1
	RETX1
	

TEXT ·PCMPGTWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PCMPGTW X2, X1
	RETX1
	


TEXT ·PMADDWDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0xF5;  BYTE $0xca // $0xca = X2, X1
	RETX1
	

TEXT ·PMADDWDm128int32(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0xF5;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PMAXSWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMAXSW X2, X1
	RETX1
	

TEXT ·PMAXSWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMAXSW X2, X1
	RETX1
	


TEXT ·PMAXUBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMAXUB X2, X1
	RETX1
	

TEXT ·PMAXUBm128uint8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMAXUB X2, X1
	RETX1
	


TEXT ·PMINSWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMINSW X2, X1
	RETX1
	

TEXT ·PMINSWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMINSW X2, X1
	RETX1
	


TEXT ·PMINUBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMINUB X2, X1
	RETX1
	

TEXT ·PMINUBm128uint8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMINUB X2, X1
	RETX1
	


TEXT ·PMULHUWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMULHUW X2, X1
	RETX1
	

TEXT ·PMULHUWm128uint16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMULHUW X2, X1
	RETX1
	


TEXT ·PMULHWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMULHW X2, X1
	RETX1
	

TEXT ·PMULHWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMULHW X2, X1
	RETX1
	


TEXT ·PMULLWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMULLW X2, X1
	RETX1
	

TEXT ·PMULLWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PMULLW X2, X1
	RETX1
	


TEXT ·PMULUDQm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0xF4;  BYTE $0xca // $0xca = X2, X1
	RETX1
	

TEXT ·PMULUDQm128int64(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0xF4;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PORm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	POR X2, X1
	RETX1
	


TEXT ·PSADBWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSADBW X2, X1
	RETX1
	


TEXT ·PSLLDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0xF2;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PSLLQm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSLLQ X2, X1
	RETX1
	


TEXT ·PSLLWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSLLW X2, X1
	RETX1
	


TEXT ·PSRADm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0xE2;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PSRAWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSRAW X2, X1
	RETX1
	


TEXT ·PSRLDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0xD2;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PSRLQm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSRLQ X2, X1
	RETX1
	


TEXT ·PSRLWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSRLW X2, X1
	RETX1
	


TEXT ·PSUBBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBB X2, X1
	RETX1
	

TEXT ·PSUBBm128int8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBB X2, X1
	RETX1
	


TEXT ·PSUBDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA;  BYTE $0xca // $0xca = X2, X1
	RETX1
	

TEXT ·PSUBDm128int32(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0xFA;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PSUBQm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBQ X2, X1
	RETX1
	

TEXT ·PSUBQm128int64(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBQ X2, X1
	RETX1
	


TEXT ·PSUBSBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBSB X2, X1
	RETX1
	

TEXT ·PSUBSBm128int8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBSB X2, X1
	RETX1
	


TEXT ·PSUBSWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBSW X2, X1
	RETX1
	

TEXT ·PSUBSWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBSW X2, X1
	RETX1
	


TEXT ·PSUBUSBm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBUSB X2, X1
	RETX1
	

TEXT ·PSUBUSBm128uint8(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBUSB X2, X1
	RETX1
	


TEXT ·PSUBUSWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBUSW X2, X1
	RETX1
	

TEXT ·PSUBUSWm128uint16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBUSW X2, X1
	RETX1
	


TEXT ·PSUBWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBW X2, X1
	RETX1
	

TEXT ·PSUBWm128int16(SB),NOSPLIT,$0-48
	X1X2TOREG
	PSUBW X2, X1
	RETX1
	


TEXT ·PUNPCKHBWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PUNPCKHBW X2, X1
	RETX1
	


TEXT ·PUNPCKHDQm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0x6A;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PUNPCKHQDQm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PUNPCKHQDQ X2, X1
	RETX1
	


TEXT ·PUNPCKHWDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0x69;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PUNPCKLBWm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PUNPCKLBW X2, X1
	RETX1
	


TEXT ·PUNPCKLDQm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0x62;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PUNPCKLQDQm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PUNPCKLQDQ X2, X1
	RETX1
	


TEXT ·PUNPCKLWDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	BYTE $0x66; BYTE $0x0F; BYTE $0x61;  BYTE $0xca // $0xca = X2, X1
	RETX1
	


TEXT ·PXORm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	PXOR X2, X1
	RETX1
	


TEXT ·SHUFPDm128byte(SB),NOSPLIT,$0-56
	
	X1X2TOREG
	MOVQ c+48(FP), CX
	IMMX(SHUFPD)


TEXT ·SHUFPDm128float32(SB),NOSPLIT,$0-56
	
	X1X2TOREG
	MOVQ c+48(FP), CX
	IMMX(SHUFPD)



TEXT ·SQRTPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	SQRTPD X2, X1
	RETX1
	

TEXT ·SQRTPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	SQRTPD X2, X1
	RETX1
	


TEXT ·SQRTSDm64byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	SQRTSD X2, X1
	RETX1
	

TEXT ·SQRTSDm64float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	SQRTSD X2, X1
	RETX1
	


TEXT ·SUBPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	SUBPD X2, X1
	RETX1
	

TEXT ·SUBPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	SUBPD X2, X1
	RETX1
	


TEXT ·SUBSDm64byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	SUBSD X2, X1
	RETX1
	

TEXT ·SUBSDm64float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	SUBSD X2, X1
	RETX1
	


TEXT ·UCOMISDm64byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	UCOMISD X2, X1
	RETX1
	


TEXT ·UNPCKHPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	UNPCKHPD X2, X1
	RETX1
	


TEXT ·UNPCKLPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	UNPCKLPD X2, X1
	RETX1
	

TEXT ·UNPCKLPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	UNPCKLPD X2, X1
	RETX1
	


TEXT ·XORPDm128byte(SB),NOSPLIT,$0-48
	X1X2TOREG
	XORPD X2, X1
	RETX1
	

TEXT ·XORPDm128float32(SB),NOSPLIT,$0-48
	X1X2TOREG
	XORPD X2, X1
	RETX1
	


